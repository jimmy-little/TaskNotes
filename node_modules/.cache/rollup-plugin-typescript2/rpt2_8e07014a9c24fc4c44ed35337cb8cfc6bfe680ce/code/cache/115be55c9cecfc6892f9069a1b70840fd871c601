{"code":"import { Plugin } from \"obsidian\";\r\nimport { TaskNoteSettingsTab, DEFAULT_SETTINGS } from \"./settings\";\r\nexport default class TaskNotePlugin extends Plugin {\r\n    async onload() {\r\n        console.log(\"Loading TaskNote Plugin...\");\r\n        await this.loadSettings();\r\n        this.addSettingTab(new TaskNoteSettingsTab(this.app, this));\r\n        this.registerMarkdownCodeBlockProcessor(\"tasknote\", async (source, el, ctx) => {\r\n            const files = this.app.vault.getMarkdownFiles();\r\n            const lines = [];\r\n            for (const file of files) {\r\n                const metadata = this.app.metadataCache.getFileCache(file);\r\n                const frontmatter = metadata?.frontmatter;\r\n                if (frontmatter?.type === \"task\") {\r\n                    const title = frontmatter.title || file.basename;\r\n                    const done = frontmatter.completed ? true : false;\r\n                    const due = frontmatter.due || \"\";\r\n                    if (!done) {\r\n                        lines.push(`☐ <strong>${title}</strong> (due: ${due})`);\r\n                    }\r\n                    else {\r\n                        lines.push(`☑ <strong>${title}</strong> (completed)`);\r\n                    }\r\n                }\r\n            }\r\n            el.innerHTML = `<ul>${lines.map(line => `<li>${line}</li>`).join(\"\\n\")}</ul>`;\r\n        });\r\n    }\r\n    onunload() {\r\n        console.log(\"Unloading TaskNote Plugin...\");\r\n    }\r\n    async loadSettings() {\r\n        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\r\n    }\r\n    async saveSettings() {\r\n        await this.saveData(this.settings);\r\n    }\r\n}\r\n","references":["/Users/Jimmy.Little/Documents/GitHub/TaskNote/node_modules/obsidian/obsidian.d.ts","/Users/Jimmy.Little/Documents/GitHub/TaskNote/settings.ts"]}
